#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Function to sort the linked list using bubble sort
void sortLinkedList(struct Node* head) {
    int swapped, temp;
    struct Node* ptr;
    struct Node* lastPtr = NULL;

    // Checking for empty list
    if (head == NULL)
        return;

    do {
        swapped = 0;
        ptr = head;

        while (ptr->next != lastPtr) {
            if (ptr->data > ptr->next->data) {
                temp = ptr->data;
                ptr->data = ptr->next->data;
                ptr->next->data = temp;
                swapped = 1;
            }
            ptr = ptr->next;
        }
        lastPtr = ptr;
    } while (swapped);
}

// Function to reverse the linked list
void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

// Function to concatenate two linked lists
void concatenateLinkedLists(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL) {
        *head1 = head2;
    } else {
        struct Node* temp = *head1;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = head2;
    }
}

// Function to display the linked list
void displayLinkedList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    struct Node* head2 = NULL;

    // Inserting elements into the first linked list
    insertAtBeginning(&head, 5);
    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 9);
    printf("Original List 1: ");
    displayLinkedList(head);

    // Sorting the first linked list
    sortLinkedList(head);
    printf("Sorted List 1: ");
    displayLinkedList(head);

    // Reversing the first linked list
    reverseLinkedList(&head);
    printf("Reversed List 1: ");
    displayLinkedList(head);

    // Inserting elements into the second linked list
    insertAtBeginning(&head2, 10);
    insertAtBeginning(&head2, 7);
    insertAtBeginning(&head2, 1);
    printf("Original List 2: ");
    displayLinkedList(head2);

    // Concatenating two linked lists
    concatenateLinkedLists(&head, head2);
    printf("Concatenated List: ");
    displayLinkedList(head);

    return 0;
}

output
Original List 1: 9 3 5 
Sorted List 1: 3 5 9 
Reversed List 1: 9 5 3 
Original List 2: 1 7 10 
Concatenated List: 9 5 3 1 7 10 
