#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 100

// Node structure for adjacency list
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Graph structure
typedef struct {
    int numVertices;
    Node* adjLists[MAX_VERTICES];
    bool visited[MAX_VERTICES];
} Graph;

// Create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Add an edge to the graph
void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

// Depth First Search traversal
void DFS(Graph* graph, int vertex) {
    graph->visited[vertex] = true;
    for (Node* temp = graph->adjLists[vertex]; temp != NULL; temp = temp->next) {
        int connectedVertex = temp->data;
        if (!graph->visited[connectedVertex]) {
            DFS(graph, connectedVertex);
        }
    }
}

// Check if the graph is connected
bool isConnected(Graph* graph) {
    DFS(graph, 0); // Start DFS from vertex 0
    for (int i = 0; i < graph->numVertices; i++) {
        if (!graph->visited[i]) {
            return false;
        }
    }
    return true;
}

// Example usage
int main() {
    Graph graph = {6}; // Create a graph with 6 vertices
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 2);
    addEdge(&graph, 3, 4);
    addEdge(&graph, 4, 5);

    if (isConnected(&graph)) {
        printf("The graph is connected\n");
    } else {
        printf("The graph is not connected\n");
    }

    return 0;
}
